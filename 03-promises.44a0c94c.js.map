{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,KAAMJ,SAASC,cAAc,SA8B/B,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,YAEpBA,MApCPT,EAAKM,KAAKW,iBAAiB,UAAU,SAAAC,GAEnC,GADAA,EAAEC,iBAEAC,OAAOC,SAASrB,EAAKC,WAAWqB,OAAS,GACzCF,OAAOC,SAASrB,EAAKK,YAAYiB,OAAS,GAC1CF,OAAOC,SAASrB,EAAKI,UAAUkB,OAAS,EAExCC,EAAAzB,GAAS0B,OAAOC,QAAQ,wCAI1B,IADA,IAAIC,EAAaN,OAAOC,SAASrB,EAAKC,WAAWqB,OACxCK,EAAI,EAAGA,GAAKP,OAAOC,SAASrB,EAAKK,YAAYiB,OAAQK,GAAK,EACjEpB,EAAca,OAAOC,SAASM,GAAID,GAC/BE,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBc,EAAAzB,GAAS0B,OAAOM,QACd,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,UAGjDuB,OAAM,SAAAH,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBc,EAAAzB,GAAS0B,OAAOC,QACd,sBAAqCM,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,UAGjDiB,GAAcN,OAAOC,SAASrB,EAAKI,UAAUkB,U","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  inputDelay: document.querySelector('input[name=\"delay\"]'),\n  inputStep: document.querySelector('input[name=\"step\"]'),\n  inputAmount: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('form'),\n};\n\nrefs.form.addEventListener('submit', e => {\n  e.preventDefault();\n  if (\n    Number.parseInt(refs.inputDelay.value) < 0 ||\n    Number.parseInt(refs.inputAmount.value) < 0 ||\n    Number.parseInt(refs.inputStep.value) < 0\n  ) {\n    Notiflix.Notify.failure('Error! Your values is negative!');\n    return;\n  }\n  let delayValue = Number.parseInt(refs.inputDelay.value);\n  for (let i = 1; i <= Number.parseInt(refs.inputAmount.value); i += 1) {\n    createPromise(Number.parseInt(i), delayValue)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delayValue += Number.parseInt(refs.inputStep.value);\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","inputDelay","document","querySelector","inputStep","inputAmount","form","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","Number","parseInt","value","$parcel$interopDefault","Notify","failure","delayValue","i","then","param","success","concat","catch"],"version":3,"file":"03-promises.44a0c94c.js.map"}