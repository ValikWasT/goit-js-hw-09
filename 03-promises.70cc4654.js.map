{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,KAAMJ,SAASC,cAAc,SA8B/B,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,MAEpBA,MApCPT,EAAKM,KAAKW,iBAAiB,UAAUC,IAEnC,GADAA,EAAEC,iBAEAC,OAAOC,SAASrB,EAAKC,WAAWqB,OAAS,GACzCF,OAAOC,SAASrB,EAAKK,YAAYiB,OAAS,GAC1CF,OAAOC,SAASrB,EAAKI,UAAUkB,OAAS,EAGxC,YADAC,EAAAzB,GAAS0B,OAAOC,QAAQ,mCAG1B,IAAIC,EAAaN,OAAOC,SAASrB,EAAKC,WAAWqB,OACjD,IAAK,IAAIK,EAAI,EAAGA,GAAKP,OAAOC,SAASrB,EAAKK,YAAYiB,OAAQK,GAAK,EACjEpB,EAAca,OAAOC,SAASM,GAAID,GAC/BE,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACjBc,EAAAzB,GAAS0B,OAAOK,QACd,uBAAqBrB,QAAiBC,UAGzCqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBc,EAAAzB,GAAS0B,OAAOC,QACd,sBAAoBjB,QAAeC,UAGzCiB,GAAcN,OAAOC,SAASrB,EAAKI,UAAUkB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  inputDelay: document.querySelector('input[name=\"delay\"]'),\n  inputStep: document.querySelector('input[name=\"step\"]'),\n  inputAmount: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('form'),\n};\n\nrefs.form.addEventListener('submit', e => {\n  e.preventDefault();\n  if (\n    Number.parseInt(refs.inputDelay.value) < 0 ||\n    Number.parseInt(refs.inputAmount.value) < 0 ||\n    Number.parseInt(refs.inputStep.value) < 0\n  ) {\n    Notiflix.Notify.failure('Error! Your values is negative!');\n    return;\n  }\n  let delayValue = Number.parseInt(refs.inputDelay.value);\n  for (let i = 1; i <= Number.parseInt(refs.inputAmount.value); i += 1) {\n    createPromise(Number.parseInt(i), delayValue)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delayValue += Number.parseInt(refs.inputStep.value);\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","inputDelay","document","querySelector","inputStep","inputAmount","form","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","Number","parseInt","value","$parcel$interopDefault","Notify","failure","delayValue","i","then","success","catch"],"version":3,"file":"03-promises.70cc4654.js.map"}