{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,KAAMJ,SAASC,cAAc,SAoB/B,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EACFI,EAAQ,CAAEG,SAAAT,EAAUU,MAAAT,IAEpBM,EAAO,CAAEE,SAAAT,EAAUU,MAAAT,MAEpBA,MAGFU,MAAK,SAAAC,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MACjBG,EAAAvB,GAASwB,OAAOC,QAAQ,uBAAwCC,OAAfP,EAAS,QAAYO,OAANN,EAAM,UAEvEO,OAAM,SAAAL,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MAClBG,EAAAvB,GAASwB,OAAOI,QAAQ,sBAAqCF,OAAfP,EAAS,QAAYO,OAANN,EAAM,UAjCzElB,EAAKM,KAAKqB,iBAAiB,UAAU,SAAAC,GAEnC,GADAA,EAAEC,iBAEAC,OAAOC,SAAS/B,EAAKC,WAAW+B,OAAS,GACzCF,OAAOC,SAAS/B,EAAKK,YAAY2B,OAAS,GAC1CF,OAAOC,SAAS/B,EAAKI,UAAU4B,OAAS,EAExCX,EAAAvB,GAASwB,OAAOI,QAAQ,wCAI1B,IADA,IAAIO,EAAaH,OAAOC,SAAS/B,EAAKC,WAAW+B,OACxCE,EAAI,EAAGA,GAAKJ,OAAOC,SAAS/B,EAAKK,YAAY2B,OAAQE,GAAK,EACjE3B,EAAcuB,OAAOC,SAASG,GAAID,GAClCA,GAAcH,OAAOC,SAAS/B,EAAKI,UAAU4B,U","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  inputDelay: document.querySelector('input[name=\"delay\"]'),\n  inputStep: document.querySelector('input[name=\"step\"]'),\n  inputAmount: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('form'),\n};\n\nrefs.form.addEventListener('submit', e => {\n  e.preventDefault();\n  if (\n    Number.parseInt(refs.inputDelay.value) < 0 ||\n    Number.parseInt(refs.inputAmount.value) < 0 ||\n    Number.parseInt(refs.inputStep.value) < 0\n  ) {\n    Notiflix.Notify.failure('Error! Your values is negative!');\n    return;\n  }\n  let delayValue = Number.parseInt(refs.inputDelay.value);\n  for (let i = 1; i <= Number.parseInt(refs.inputAmount.value); i += 1) {\n    createPromise(Number.parseInt(i), delayValue);\n    delayValue += Number.parseInt(refs.inputStep.value);\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  promise\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","inputDelay","document","querySelector","inputStep","inputAmount","form","$ce04d3a99e08e73b$var$createPromise","position1","delay1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","position","delay","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","addEventListener","e","preventDefault","Number","parseInt","value","delayValue","i"],"version":3,"file":"03-promises.c2984c8b.js.map"}